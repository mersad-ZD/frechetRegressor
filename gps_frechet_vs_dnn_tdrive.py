# -*- coding: utf-8 -*-
"""GPS_frechet_vs_DNN_Tdrive.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CEj3Z44jEvZCfqRKnMaWZDpkLPmK43nX
"""

!pip install similaritymeasures

from google.colab import drive
drive.mount('/content/drive')

from keras.models import load_model
import pandas as pd
import numpy as np
import similaritymeasures as sm
from sklearn.metrics import mean_absolute_error
from numpy.random import randint
from sklearn.preprocessing import StandardScaler
import time


# ---------------------------------------------------------------------------
regressor = load_model(r"/content/drive/My Drive/lot_model/model_new_mix_4tdrive_128_noScale(4.3).h5")
# ---------------------------------------------------------------------------
# df1 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-02__lat_long.csv")
# df2 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-03__lat_long.csv")
# df3 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-04__lat_long.csv")
# df4 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-05__lat_long.csv")
# df5 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-06__lat_long.csv")
# df6 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-07__lat_long.csv")
# df7 = pd.read_csv(r"/content/drive/My Drive/Tdrive_trajectory/tdrive_2008-02-08__lat_long.csv")
df10 = pd.read_csv(r"/content/drive/My Drive/Created_dataset/mydf10_100000_128_lat_long.csv")
dataset = df10.iloc[:68887, :256]


# dataset = pd.concat([df1, df2, df3, df4, df5, df6, df7], ignore_index=True)
print(dataset.shape)
dataset = np.array(dataset)
# scalar = StandardScaler()
# dataset = scalar.fit_transform(dataset)

# ---------------------------------------------------------------------------

vectore1 = np.zeros((128, 2), dtype=np.float32)
vectore2 = np.zeros((128, 2), dtype=np.float32)

my_data = np.zeros((34443, 512), dtype=np.float32)  # 513
frechet_vector = []
# list_of_vectors = np.ones((68886, 128, 2), dtype=np.float32)
list_of_vectors = []
k = 0
# ----------------------------------------------------------------------------
k=0
num = int((len(dataset)-1)/2)
tic1 = time.time()
for i in range(34442):
  k = i*2
  vectore1[:, 0] = dataset[k, :128]
  vectore1[:, 1] = dataset[k, 128:]

  vectore2[:, 0] = dataset[k+1, :128]
  vectore2[:, 1] = dataset[k+1, 128:]

  descrete_frechet = sm.frechet_dist(vectore1, vectore2)
  frechet_vector.append(descrete_frechet)
  # print("descrete_frechet: ", descrete_frechet)
  
toc1 = time.time()
print("time of frechet dist with loop : ", str((toc1 - tic1)*1000), " ms")

i=0
k-0
for i in range(34443):
    k= 2*i
    x1 = dataset[k, :128]
    y1 = dataset[k, 128:]

    
    x2 = dataset[k+1, :128]
    y2 = dataset[k+1, 128:]
    
    my_data[i, :] = np.concatenate((x1, y1, x2, y2))


# dataset = my_data
X = dataset


# -------------------------------------------------------------------------

# tic1 = time.time()
# for i in range(0, 68886, 2):
#      df = sm.frechet_dist(list_of_vectors[i], list_of_vectors[i+1])
#     #  print(list_of_vectors[i], list_of_vectors[i+1])
#     #  print("-----------------------------")
#     #  print(len(list_of_vectors))
#     #  print(len(list_of_vectors[i]))
#      frechet_vector.append(df)

# toc1 = time.time()
# print("time of frechet dist with loop : ", str((toc1 - tic1)*1000), " ms")

# --------------------------------------------------------------------------

tic2 = time.time()
pred_test = regressor.predict(my_data)
toc2 = time.time()
print("time of regressor prediction : ", str((toc2 - tic2)*1000), " ms")
# ----------------------------------------------------------------------------
frechet_vector = np.array(frechet_vector)
print("frechet_vector shape ", frechet_vector.shape)
print("regressor dataset ", pred_test.shape)
print("mean error is ", mean_absolute_error(pred_test[:-1], frechet_vector))


ran = randint(0, 10000,100)
for x in ran:
    print("sample ",x, " :   real frechet is ", frechet_vector[x], "prediction is ", pred_test[x])

# vec1 = np.array(pred_test)
# vec2 = frechet_vector
# max_diffierence = vec1 - vec2
# max_diffierence = np.abs(vec)
# max_diffierence = np.max(difference)
# print("max_diffierence is ", max_diffierence)

ran = randint(0, 10000,100)
for x in ran:
    print("sample ",x, " :   real frechet is ", frechet_vector[x], "prediction is ", pred_test[x])