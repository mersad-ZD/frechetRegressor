# -*- coding: utf-8 -*-
"""pyclustering_regressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NwwN2ojFZjv7vPu3dmr00ZMoHm7skdch
"""

!pip install pyclustering

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import random
import time
from numpy.random import seed
from keras.models import load_model
from pyclustering.cluster.kmeans import kmeans
from pyclustering.cluster.kmeans import kmeans_visualizer
from pyclustering.cluster import cluster_visualizer_multidim
from pyclustering.utils.metric import type_metric, distance_metric
from pyclustering.cluster.center_initializer import kmeans_plusplus_initializer

random.seed(1)
seed(1)
tic1 = time.time()
# load neural net model
regressor = load_model(r"/content/drive/My Drive/lot_model/model_new_mix_4tdrive_128_noScale(4.3).h5")

sample = pd.read_csv(r"/content/drive/My Drive/Created_dataset/30sample_clustering.csv")
print("sample.shape",sample.shape)

# sample = np.zeros((50, 256), dtype=np.float32)
# for i in range(50):
#     lat = np.random.uniform(low=-90, high=90, size=(128,))
#     long = np.random.uniform(low=-180, high=180, size=(128,))

#     lat = np.round(lat, 5)
#     long = np.round(long, 5)

#     sample[i, :] = np.concatenate((lat, long))

def ds_regressor(point1, point2):
    combined_vec = np.concatenate((point1, point2))
    proper_vec = np.reshape(combined_vec, (1, 512))
    pred_distance = regressor.predict(proper_vec)
    print("pred_distance",pred_distance)
    return pred_distance

# create K-Means algorithm with specific distance metric
user_function = lambda point1, point2: ds_regressor(point1, point2)
metric = distance_metric(type_metric.USER_DEFINED, func=user_function)


start_centers = kmeans_plusplus_initializer(sample, 4).initialize()
kmeans_instance = kmeans(sample, start_centers, metric=metric)    #

# run cluster analysis and obtain results
kmeans_instance.process()
clusters = kmeans_instance.get_clusters()
centers = kmeans_instance.get_centers()
print("clusters", clusters)

toc1 = time.time()
print("time of clustering : ", str((toc1 - tic1)*1000), " ms")